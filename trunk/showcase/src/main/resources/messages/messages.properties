#==============================================================================
# Home
#==============================================================================

home.title=Welcome to JFX Flow
home.message=JFX Flow is a free, open source framework for developing rich, \
  interactive and user friendly web-style GUIs for desktops using JavaFX (2.0+). \
  JFX Flow combines the powerful feature set of Java FX (styling, animations, FXML, \
  etc) with a simple ‘web flow’ style framework, that is easy to use and that fosters \
  clean architectural patterns, especially when developing JEE applications.

home.navigation=Navigation
home.navigation.description=Learn how JFX Flow helps you build applications \
  with support for browser-style navigation, such as back and forward buttons.

home.transitions=Page Transitions
home.transitions.description=See how JFX Flow builds upon JavaFX's powerful animation \
  toolkit to allow you to build cool animations to transition between pages.

home.threading=Threading
home.threading.description=JFX Flow provides a general toolkit to simplify working with \
  background threads in JavaFX. In particular it provides support for showing busy/wait \
  feedback, and provides a framework for error handling.

home.dialogs=Dialogs (under construction)
home.dialogs.description=Dialogs should be used sparringly and should be limited to simple \
  alerts and prompts. Sometimes, however, they are unavoidable and JFX Flow provides a simple\
  framework for working with dialogs in JavaFX applications.

home.forms=Forms and Wizards (planned)
home.forms.description=JFX Flow will soon provide support for working with forms and wizards, \
  including form field validation and integration with the JFX Flow navigation mechanism.


#==============================================================================
# Navigation
#==============================================================================

navigation.title=Navigation with JFX Flow
navigation.message=At the heart of the JFX Flow system is its navigation framework. There are \
  three main navigation components of a typical JFX Flow application: the Browser, the \
  NavigationManager and Activities. Click on a component below to learn more about it.

navigation.browser.callout=Browser
navigation.browser.info=Browser info

navigation.activity.callout=Activity
navigation.activity.info=Activity info

navigation.navigationManager.callout=Navigation Manager
navigation.navigationManager.info=Navigation info


#==============================================================================
# BrowserInfo
#==============================================================================

navigation.browserInfo.title=Browsers
navigation.browserInfo.message=The Browser is the top-level container for your application. Unlike a web \
  application however, the JFX Flow Browser is built into your application code and is a part of your \
  application. \
  \n\n\
  JFX Flow provides a default browser for you and in most cases this will do the job. A dash of CSS styling \
  can make the Browser look how you want it and the rest is taken care of for you. In some cases however, you \
  may want to customise your browser more heavily. With JFX Flow you can build your own browser, adding \
  additional controls and layout to suit your needs. \
  \n\n\
  You can even have multiple browsers if you want, or you could create a tabbed-browser (similar to that used \
  by most web browsers these days). You have to do a little more work yourself in these special cases but with \
  JFX Flow, since everything is in Java code which has been designed to be customised by you, you are in the \
  driver's seat.



#==============================================================================
# ActivityInfo
#==============================================================================

navigation.activityInfo.title=Activities
navigation.activityInfo.message=Activities are the building block of your application. Each page you show \
  in your browser will be a different 'activity'. Activities can be used anywhere however, not just in Browsers; \
  if you want to embed an activity inside another activity, or show an activity in a dialog, that's fine too! \
  \n\n\
  The term 'Activity' has been inspired by the concept used by both Google's Web Toolkit and Google's Android tools. \
  If you are familiar with either of these then you will find JFX Flow's use of activities quite familiar. For \
  developers not familiar with these, the activity does the job of a 'controller' in a traditional MVC application. \
  Given the rise of the Model View Presenter pattern and the historical confusion around 'controllers' in traditional \
  MVC applications, the 'Activity' term is a nicer fit. \
  \n\n\
  Each activity has an associated view which provides the visual representation of the activity. This view can \
  be built using normal Java code, however most of the time you will want to build these views in FXML, with the \
  activity acting as the controller for the view. JFX Flow provides utilities to make working with FXML and \
  activities easier, fostering a separation between your layout code (in FXML) and your logic (in Java). \
  \n\n\
  Activities are designed to be autonomous code modules that can be dropped into a container, such as browser. A \
  number of optional interfaces can be implemented by each Activity to define how they are activated, the parameters \
  they are interested in and even the entry and exit animations to use when showing them.


#==============================================================================
# NavigationManagerInfo
#==============================================================================

navigation.navigationManagerInfo.title=The Navigation Manager
navigation.navigationManagerInfo.message=The Navigation Manager is the backbone of the JFX Flow navigation system. \
  Typically a single Navigation Manager will exist for an application and it provides a way for developers to \
  navigate between pages (i.e. activities) within the browser through methods suchs as 'goTo', 'goBack' and 'goForward'. \
  \n\n\
  The NavigationManager uses Places to determine which page to show. A place is a simple JavaBean and can be thought \
  of as the JFX Flow version of a URL. When you create your NavigationManager you register any number of \
  PlaceResolvers, which know how to map from a place name (such as 'home') to an activity that can display that \
  place (such as your custom 'HomeActivity'). Each Place can also have any number of parameters, which can be \
  passed to the activity when it is shown.\
  \n\n\
  The NavigationManager provides several other features, the main one being history management. As the user navigates \
  between places within your application, the NavigationManager tracks these in a history list in the same way that \
  most web browsers do. You can access (and manipulate) this history directly for special navigation cases.

#==============================================================================
# Transitions
#==============================================================================

transitions.title=Animated Page Transitions
transitions.message=Let's face it, animations are cooler than the Fonz, and we all want to make cool stuff.  \
  JFX Flow helps you do this by providing a small framework for creating animated page transitions. \
  Some default transitions, such as fade in and fade out, are provided for you, but you can write your \
  own custom page animations to do anything you like. Check out the links below to see some page \
  transitions in action.

transitions.fade=Fade In and Fade Out
transitions.fade.description=A gentle fade out of the current page, and then fade in of the next. This transition is \
  the default used by the Browser, but you can easily override this.

transitions.fly=Fly In and Fly Out
transitions.fly.description=The classic fly-in and fly-out transition.

transitions.custom=Custom transitions
transitions.custom.description=Build your own custom page transitions using JavaFX's animation framework.


#==============================================================================
# TransitionExample
#==============================================================================

transitionExample.title=Everybody be Cool
transitionExample.message.fade=Never let your dreams fade away
transitionExample.message.fly=That's not flying, that's just falling with style.


#==============================================================================
# Threading
#==============================================================================

threading.title=Working with Threads
threading.message=Whether you are talking to a back-end server, reading from a file, or just \
  crunching some large numbers, you will need to use background threads. JFX Flow builds on top \
  of JavaFX's Worker framework to help make the user interaction side of this a little nicer. In \
  particular it provides a way to block the UI while a thread is running and helps you handle any \
  errors that may occur.

threading.blocking.title=Blocking the Screen
threading.blocking.message=JFX Flow provides a default way to block the entire screen while a \
  background thread is running. It does this using a 'glasspane', which stops the user from \
  interacting with your UI. You can style the glasspane however you like. The default style provided \
  by JFX Flow is subtle, simply changing the cursor to an hour-glass.
threading.block=Start
threading.block.normal=Click the start button to start a thread
threading.block.started=Working... the screen is now blocked
threading.block.done=Done, the screen is now released

threading.blocking.custom.message=JFX Flow doesn't force you to use this blocking mechanism if you don't \
  want. Often for special cases, you will need to provide your own feedback and control. You can still do \
  this using JavaFX's built in Worker framework. The button below shows a custom task that uses a \
  ProgressIndicator to show the thread progress.
threading.block.custom=Start
threading.block.custom.normal=Click the start button to start a thread
threading.block.custom.started=Working... the screen is not blocked
threading.block.custom.done=Done

threading.errors.title=Handling Errors
threading.errors.message=With background tasks you usually have a lot more things that can go wrong. JFX \
  Flow provides a mechanism for catching and handling exceptions in your workers. The default handler \
  simply takes the user to an error page with details on the exception. This is intended only for unexpected \
  an unhandled execptions however, and in most cases you will want to provide your own custom error page. With \
  JFX Flow this is easy to do. To see the default error page in action, click the button below.
threading.errors.start=Make an error



#==============================================================================
# Dialogs
#==============================================================================

dialogs.title=Using Dialogs
dialogs.underConstruction=Note: the dialog feature in JFX Flow is still currently under construction. \
  There are a number of cleanups needed and I am looking at including support for OptionPane style dialogs \
  and also ActivityDialogs. The API may change somewhat when this happens.
dialogs.message=Dialogs are an important part of a developers toolkit, however they should be used sparringly. \
  Most web applications avoid the need for dialogs by taking the user to a new page whenever possible, and this \
  approach is highly recommended. For those cases however when you really do need a dialog box, JFX Flow provides \
  a simple mechanism for doing this. Click the button below to see a JFX Flow Dialog in action.
dialogs.simple.show=Show Simple Dialog


#==============================================================================
# Forms
#==============================================================================

forms.title=Forms and Wizards
forms.message=Forms and wizards are an important part of an application framework. For most JEE applications \
  forms make up the bulk of the pages. A form and wizard framework for JFX flow is planned for the near future \
  however the current state of FXML and bean binding means that this form framework has a less-than-optimal API. \
  A number of features planned for the 2.1 release of JavaFX may improve this situation significantly and I am \
  waiting to see the beta-release of these features before commiting JFX Flow to a particular form binding strategy.
forms.features.title=The features being considered for inclusion in the JFX Flow framework include:
forms.features.binding=Field to bean bindings (although hopefully JavaFX 2.1 will include the bulk of what's needed for this).
forms.features.validation=Form field validation (hopefully based around JSR303 Bean Validation).
forms.features.highlights=Validation error rendering, such as highlighting error fields and displaying error messages.
forms.features.blocking=Locking navigation so an Activity can prevent the user from navigating away until they either save or discard their changes.
forms.features.wizards=A wizard framework, aggregating several forms into a 'wizard' work-flow.






